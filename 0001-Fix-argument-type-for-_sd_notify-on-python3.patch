From 63c62f201a971ff2053893e69339311c3f69f101 Mon Sep 17 00:00:00 2001
From: Alberto Murillo <alberto.murillo.silva@intel.com>
Date: Wed, 30 Mar 2016 17:42:30 -0600
Subject: [PATCH] Fix argument type for _sd_notify() on python3

socket.sendall() expects a byte-string as
argument but takes its from _sd_notify in
a string format causing an exception on python3

Closes-Bug: #1564150

Change-Id: I16de988739b9e37b8b2721fefd3c6be485e5a4c7
---
 oslo_service/systemd.py            | 6 +++---
 oslo_service/tests/test_systemd.py | 4 ++--
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/oslo_service/systemd.py b/oslo_service/systemd.py
index b213d32..ee11dab 100644
--- a/oslo_service/systemd.py
+++ b/oslo_service/systemd.py
@@ -53,7 +53,7 @@ def notify():
     For details see
     http://www.freedesktop.org/software/systemd/man/sd_notify.html
     """
-    _sd_notify(False, 'READY=1')
+    _sd_notify(False, b'READY=1')
 
 
 def notify_once():
@@ -64,7 +64,7 @@ def notify_once():
     This method removes the NOTIFY_SOCKET environment variable to ensure
     notification is sent only once.
     """
-    _sd_notify(True, 'READY=1')
+    _sd_notify(True, b'READY=1')
 
 
 def onready(notify_socket, timeout):
@@ -86,7 +86,7 @@ def onready(notify_socket, timeout):
             msg = sock.recv(512)
         except socket.timeout:
             return 2
-        if 'READY=1' in msg:
+        if b'READY=1' == msg:
             return 0
         else:
             return 1
diff --git a/oslo_service/tests/test_systemd.py b/oslo_service/tests/test_systemd.py
index 87dffa7..2b6b222 100644
--- a/oslo_service/tests/test_systemd.py
+++ b/oslo_service/tests/test_systemd.py
@@ -45,7 +45,7 @@ class SystemdTestCase(test_base.BaseTestCase):
                 self.closed = True
 
             def sendall(fs, data):
-                if data == 'READY=1':
+                if data == b'READY=1':
                     self.ready = True
 
         with mock.patch.object(socket, 'socket', new=FakeSocket):
@@ -67,7 +67,7 @@ class SystemdTestCase(test_base.BaseTestCase):
 
     @mock.patch("socket.socket")
     def test_onready(self, sock_mock):
-        recv_results = ['READY=1', '', socket.timeout]
+        recv_results = [b'READY=1', '', socket.timeout]
         expected_results = [0, 1, 2]
         for recv, expected in zip(recv_results, expected_results):
             if recv == socket.timeout:
-- 
2.5.5

